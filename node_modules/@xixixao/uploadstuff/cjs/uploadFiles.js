"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadFiles = void 0;
const uploadFiles = (args) => __awaiter(void 0, void 0, void 0, function* () {
    return Promise.all(args.files.map((file) => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield fetchWithProgress(args.url, {
            method: "POST",
            body: file,
            headers: new Headers({
                "Content-Type": getMimeType(file),
            }),
        }, (progressEvent) => {
            var _a;
            return (_a = args.onUploadProgress) === null || _a === void 0 ? void 0 : _a.call(args, {
                file: file.name,
                progress: (progressEvent.loaded / progressEvent.total) * 100,
            });
        }, () => {
            var _a;
            (_a = args.onUploadBegin) === null || _a === void 0 ? void 0 : _a.call(args, {
                file: file.name,
            });
        });
        return {
            name: file.name,
            size: file.size,
            type: file.type,
            response,
        };
    })));
});
exports.uploadFiles = uploadFiles;
function fetchWithProgress(url, opts = {}, onProgress, onUploadBegin) {
    return new Promise((resolve, reject) => {
        var _a;
        const xhr = new XMLHttpRequest();
        xhr.responseType = "json";
        xhr.open((_a = opts.method) !== null && _a !== void 0 ? _a : "get", url);
        opts.headers &&
            Object.keys(opts.headers).forEach((h) => { var _a; return opts.headers && xhr.setRequestHeader(h, (_a = opts.headers.get(h)) !== null && _a !== void 0 ? _a : ""); });
        xhr.onload = () => {
            resolve(xhr.response);
        };
        xhr.onerror = reject;
        if (xhr.upload && onProgress)
            xhr.upload.onprogress = onProgress;
        if (xhr.upload && onUploadBegin)
            xhr.upload.onloadstart = onUploadBegin;
        xhr.send(opts.body);
    });
}
function getMimeType(file) {
    if (file.type === "blob") {
        return "application/octet-stream";
    }
    else if (file.type === "pdf") {
        return "application/pdf";
    }
    else {
        return file.type;
    }
}
//# sourceMappingURL=uploadFiles.js.map