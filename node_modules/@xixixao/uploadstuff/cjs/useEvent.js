"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useEvent = void 0;
// Ripped from https://github.com/scottrippey/react-use-event-hook
const react_1 = require("react");
const noop = () => void 0;
/**
 * Suppress the warning when using useLayoutEffect with SSR. (https://reactjs.org/link/uselayouteffect-ssr)
 * Make use of useInsertionEffect if available.
 */
const useInsertionEffect_ = typeof window !== "undefined"
    ? // useInsertionEffect is available in React 18+
        react_1.useInsertionEffect || react_1.useLayoutEffect
    : noop;
/**
 * Similar to useCallback, with a few subtle differences:
 * - The returned function is a stable reference, and will always be the same between renders
 * - No dependency lists required
 * - Properties or state accessed within the callback will always be "current"
 */
function useEvent(callback) {
    // Keep track of the latest callback:
    const latestRef = (0, react_1.useRef)(
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any
    useEvent_shouldNotBeInvokedBeforeMount);
    useInsertionEffect_(() => {
        latestRef.current = callback;
    }, [callback]);
    // Create a stable callback that always calls the latest callback:
    // using useRef instead of useCallback avoids creating and empty array on every render
    const stableRef = (0, react_1.useRef)();
    if (!stableRef.current) {
        stableRef.current = function () {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-return, prefer-rest-params, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any
            return latestRef.current.apply(this, arguments);
        };
    }
    return stableRef.current;
}
exports.useEvent = useEvent;
/**
 * Render methods should be pure, especially when concurrency is used,
 * so we will throw this error if the callback is called while rendering.
 */
function useEvent_shouldNotBeInvokedBeforeMount() {
    throw new Error("INVALID_USEEVENT_INVOCATION: the callback from useEvent cannot be invoked before the component has mounted.");
}
//# sourceMappingURL=useEvent.js.map