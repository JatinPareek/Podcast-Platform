export const uploadFiles = async (args) => {
    return Promise.all(args.files.map(async (file) => {
        const response = await fetchWithProgress(args.url, {
            method: "POST",
            body: file,
            headers: new Headers({
                "Content-Type": getMimeType(file),
            }),
        }, (progressEvent) => args.onUploadProgress?.({
            file: file.name,
            progress: (progressEvent.loaded / progressEvent.total) * 100,
        }), () => {
            args.onUploadBegin?.({
                file: file.name,
            });
        });
        return {
            name: file.name,
            size: file.size,
            type: file.type,
            response,
        };
    }));
};
function fetchWithProgress(url, opts = {}, onProgress, onUploadBegin) {
    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.responseType = "json";
        xhr.open(opts.method ?? "get", url);
        opts.headers &&
            Object.keys(opts.headers).forEach((h) => opts.headers && xhr.setRequestHeader(h, opts.headers.get(h) ?? ""));
        xhr.onload = () => {
            resolve(xhr.response);
        };
        xhr.onerror = reject;
        if (xhr.upload && onProgress)
            xhr.upload.onprogress = onProgress;
        if (xhr.upload && onUploadBegin)
            xhr.upload.onloadstart = onUploadBegin;
        xhr.send(opts.body);
    });
}
function getMimeType(file) {
    if (file.type === "blob") {
        return "application/octet-stream";
    }
    else if (file.type === "pdf") {
        return "application/pdf";
    }
    else {
        return file.type;
    }
}
