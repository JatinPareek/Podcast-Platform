"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUploadFiles = void 0;
const react_1 = require("react");
const useEvent_1 = require("./useEvent");
const uploadFiles_1 = require("./uploadFiles");
const useUploadFiles = (uploadUrl, opts) => {
    const [isUploading, setUploading] = (0, react_1.useState)(false);
    const uploadProgress = (0, react_1.useRef)(0);
    const fileProgress = (0, react_1.useRef)(new Map());
    const startUpload = (0, useEvent_1.useEvent)((files) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        setUploading(true);
        try {
            const url = typeof uploadUrl === "string" ? uploadUrl : yield uploadUrl();
            const res = yield (0, uploadFiles_1.uploadFiles)({
                files,
                url,
                onUploadProgress: ({ file, progress }) => {
                    var _a;
                    if ((opts === null || opts === void 0 ? void 0 : opts.onUploadProgress) == null) {
                        return;
                    }
                    fileProgress.current.set(file, progress);
                    let sum = 0;
                    fileProgress.current.forEach((singleFileProgress) => {
                        sum += singleFileProgress;
                    });
                    const averageProgress = Math.floor(sum / fileProgress.current.size / 10) * 10;
                    if (averageProgress !== uploadProgress.current) {
                        (_a = opts === null || opts === void 0 ? void 0 : opts.onUploadProgress) === null || _a === void 0 ? void 0 : _a.call(opts, averageProgress);
                        uploadProgress.current = averageProgress;
                    }
                },
                onUploadBegin({ file }) {
                    var _a;
                    (_a = opts === null || opts === void 0 ? void 0 : opts.onUploadBegin) === null || _a === void 0 ? void 0 : _a.call(opts, file);
                },
            });
            yield ((_a = opts === null || opts === void 0 ? void 0 : opts.onUploadComplete) === null || _a === void 0 ? void 0 : _a.call(opts, res));
            return res;
        }
        catch (error) {
            (_b = opts === null || opts === void 0 ? void 0 : opts.onUploadError) === null || _b === void 0 ? void 0 : _b.call(opts, error);
            return [];
        }
        finally {
            setUploading(false);
            fileProgress.current = new Map();
            uploadProgress.current = 0;
        }
    }));
    return {
        startUpload,
        isUploading,
    };
};
exports.useUploadFiles = useUploadFiles;
//# sourceMappingURL=useUploadFiles.js.map