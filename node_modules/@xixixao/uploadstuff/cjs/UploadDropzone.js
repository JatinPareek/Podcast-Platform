"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadDropzone = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_dropzone_1 = require("react-dropzone");
const tailwind_merge_1 = require("tailwind-merge");
const useUploadFiles_1 = require("./useUploadFiles");
const UploadSpinner_1 = require("./UploadSpinner");
function UploadDropzone(props) {
    var _a, _b, _c, _d;
    const [files, setFiles] = (0, react_1.useState)([]);
    const [uploadProgress, setUploadProgress] = (0, react_1.useState)(0);
    const { startUpload, isUploading } = (0, useUploadFiles_1.useUploadFiles)(props.uploadUrl, {
        onUploadComplete: (res) => __awaiter(this, void 0, void 0, function* () {
            var _e;
            setFiles([]);
            yield ((_e = props.onUploadComplete) === null || _e === void 0 ? void 0 : _e.call(props, res));
            setUploadProgress(0);
        }),
        onUploadProgress: (p) => {
            var _a;
            setUploadProgress(p);
            (_a = props.onUploadProgress) === null || _a === void 0 ? void 0 : _a.call(props, p);
        },
        onUploadError: props.onUploadError,
        onUploadBegin: props.onUploadBegin,
    });
    const onDrop = (0, react_1.useCallback)((acceptedFiles) => {
        setFiles(acceptedFiles);
        if (props.uploadImmediately === true) {
            void startUpload(acceptedFiles);
            return;
        }
    }, [props, startUpload]);
    const { getRootProps, getInputProps, isDragActive } = (0, react_dropzone_1.useDropzone)({
        onDrop,
        accept: props.fileTypes,
        disabled: false,
    });
    const onUploadClick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        if (files.length === 0) {
            return;
        }
        void startUpload(files);
    };
    const combinedState = {
        isDragActive,
        progress: isUploading ? uploadProgress : null,
    };
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: (_b = (_a = props.className) === null || _a === void 0 ? void 0 : _a.call(props, combinedState)) !== null && _b !== void 0 ? _b : (0, tailwind_merge_1.twMerge)("flex flex-col items-center justify-center rounded-lg border border-dashed border-gray-900/25 dark:border-gray-200/25 px-6 py-10 text-center", isDragActive && "bg-blue-600/10", files.length === 0 && "py-[4.25rem]") }, getRootProps(), { children: [(_d = (_c = props.content) === null || _c === void 0 ? void 0 : _c.call(props, combinedState)) !== null && _d !== void 0 ? _d : ((0, jsx_runtime_1.jsx)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", className: (0, tailwind_merge_1.twMerge)("mx-auto block h-12 w-12 align-middle text-gray-400 dark:text-gray-300") }, { children: (0, jsx_runtime_1.jsx)("path", { fill: "currentColor", fillRule: "evenodd", d: "M5.5 17a4.5 4.5 0 0 1-1.44-8.765a4.5 4.5 0 0 1 8.302-3.046a3.5 3.5 0 0 1 4.504 4.272A4 4 0 0 1 15 17H5.5Zm3.75-2.75a.75.75 0 0 0 1.5 0V9.66l1.95 2.1a.75.75 0 1 0 1.1-1.02l-3.25-3.5a.75.75 0 0 0-1.1 0l-3.25 3.5a.75.75 0 1 0 1.1 1.02l1.95-2.1v4.59Z", clipRule: "evenodd" }) }))), (0, jsx_runtime_1.jsxs)("label", Object.assign({ htmlFor: "file-upload", className: (0, tailwind_merge_1.twMerge)("relative mt-4 flex w-64 cursor-pointer items-center justify-center text-sm font-semibold leading-6 text-gray-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-blue-600 focus-within:ring-offset-2 hover:text-blue-500", "text-blue-600") }, { children: ["Choose files or drag and drop", (0, jsx_runtime_1.jsx)("input", Object.assign({ className: "sr-only" }, getInputProps()))] })), props.subtitle !== undefined ? ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: (0, tailwind_merge_1.twMerge)("m-0 h-[1.25rem] text-xs leading-5 text-gray-600 dark:text-gray-500") }, { children: props.subtitle }))) : null, files.length > 0 ? ((0, jsx_runtime_1.jsx)("button", Object.assign({ className: (0, tailwind_merge_1.twMerge)("relative mt-4 flex h-10 w-36 items-center justify-center overflow-hidden rounded-md text-white after:transition-[width] after:duration-500", isUploading
                    ? `before:absolute before:-z-20 before:w-full before:h-full before:bg-blue-400 ` +
                        `bg-blue-400 after:absolute after:-z-10 after:left-0 after:h-full after:bg-blue-600 ${progressWidths[uploadProgress]}`
                    : "bg-blue-600"), onClick: onUploadClick, disabled: isUploading }, { children: isUploading ? ((0, jsx_runtime_1.jsx)(UploadSpinner_1.UploadSpinner, {})) : (`Upload ${files.length} file${files.length === 1 ? "" : "s"}`) }))) : null] })));
}
exports.UploadDropzone = UploadDropzone;
const progressWidths = {
    0: "after:w-0",
    10: "after:w-[10%]",
    20: "after:w-[20%]",
    30: "after:w-[30%]",
    40: "after:w-[40%]",
    50: "after:w-[50%]",
    60: "after:w-[60%]",
    70: "after:w-[70%]",
    80: "after:w-[80%]",
    90: "after:w-[90%]",
    100: "after:w-[100%]",
};
//# sourceMappingURL=UploadDropzone.js.map