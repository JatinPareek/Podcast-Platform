"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const tailwind_merge_1 = require("tailwind-merge");
const UploadSpinner_1 = require("./UploadSpinner");
const useUploadFiles_1 = require("./useUploadFiles");
function UploadButton(props) {
    var _a, _b, _c, _d, _e, _f;
    const fileInputRef = (0, react_1.useRef)(null);
    const [uploadProgress, setUploadProgress] = (0, react_1.useState)(0);
    const { startUpload, isUploading } = (0, useUploadFiles_1.useUploadFiles)(props.uploadUrl, {
        onUploadComplete: (res) => __awaiter(this, void 0, void 0, function* () {
            var _g;
            if (fileInputRef.current) {
                fileInputRef.current.value = "";
            }
            yield ((_g = props.onUploadComplete) === null || _g === void 0 ? void 0 : _g.call(props, res));
            setUploadProgress(0);
        }),
        onUploadProgress: (p) => {
            var _a;
            setUploadProgress(p);
            (_a = props.onUploadProgress) === null || _a === void 0 ? void 0 : _a.call(props, p);
        },
        onUploadError: props.onUploadError,
        onUploadBegin: props.onUploadBegin,
    });
    const combinedState = isUploading ? uploadProgress : null;
    return ((0, jsx_runtime_1.jsxs)("label", Object.assign({ className: (_b = (_a = props.className) === null || _a === void 0 ? void 0 : _a.call(props, combinedState)) !== null && _b !== void 0 ? _b : (0, tailwind_merge_1.twMerge)("relative flex h-10 w-36 cursor-pointer items-center justify-center " +
            "overflow-hidden rounded-md text-white after:transition-[width] after:duration-500 " +
            "hover:bg-blue-600/90", isUploading &&
            `before:absolute before:-z-20 before:w-full before:h-full before:bg-blue-400 ` +
                ` after:absolute after:-z-10 after:left-0 after:h-full after:bg-blue-600 ${progressWidths[uploadProgress]}`, !isUploading && "bg-blue-600") }, { children: [(0, jsx_runtime_1.jsx)("input", { className: "hidden", type: "file", ref: fileInputRef, multiple: props.multiple, accept: (_d = ((_c = props.fileTypes) !== null && _c !== void 0 ? _c : [])) === null || _d === void 0 ? void 0 : _d.join(", "), onChange: (event) => {
                    if (!event.target.files) {
                        return;
                    }
                    const files = Array.from(event.target.files);
                    void startUpload(files);
                }, disabled: isUploading }), (_f = (_e = props.content) === null || _e === void 0 ? void 0 : _e.call(props, combinedState)) !== null && _f !== void 0 ? _f : (isUploading ? ((0, jsx_runtime_1.jsx)(UploadSpinner_1.UploadSpinner, {})) : (`Choose File${props.multiple ? `(s)` : ``}`))] })));
}
exports.UploadButton = UploadButton;
const progressWidths = {
    0: "after:w-0",
    10: "after:w-[10%]",
    20: "after:w-[20%]",
    30: "after:w-[30%]",
    40: "after:w-[40%]",
    50: "after:w-[50%]",
    60: "after:w-[60%]",
    70: "after:w-[70%]",
    80: "after:w-[80%]",
    90: "after:w-[90%]",
    100: "after:w-[100%]",
};
//# sourceMappingURL=UploadButton.js.map